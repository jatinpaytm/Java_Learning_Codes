{\rtf1\ansi\ansicpg1252\cocoartf2639
\cocoatextscaling0\cocoaplatform0{\fonttbl\f0\froman\fcharset0 Times-Roman;\f1\froman\fcharset0 Times-Bold;\f2\froman\fcharset0 Times-Italic;
\f3\froman\fcharset0 Times-BoldItalic;}
{\colortbl;\red255\green255\blue255;\red0\green0\blue0;}
{\*\expandedcolortbl;;\cssrgb\c0\c0\c0;}
\paperw11900\paperh16840\margl1440\margr1440\vieww11520\viewh8400\viewkind0
\deftab720
\pard\pardeftab720\partightenfactor0

\f0\fs24 \cf0 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 In this assignment, you will an implement a simple measure called "term frequency", which is used in Information Retrieval (IR) field. IR is the field on which search engines like Google are based on. Below first let's discuss a bit about term frequency and then we will get into implementation details.\

\f1\b Background on Term Frequency
\f0\b0 :\
Given a search query, search engines like Google retrieve the most\'a0
\f2\i relevant
\f0\i0 \'a0Web pages and rank them based on a\'a0
\f2\i relevancy score
\f0\i0 , i.e., Web pages at the top of search results are more relevant to user query and have a higher relevancy score compared to the ones ranked lower. For this to happen, search engines store Web pages in a special data structure called\'a0
\f1\b Inverted Index
\f0\b0 . The process of building an inverted index is referred to as indexing. In an inverted index, every term (word) that appears in a Web page will be given certain\'a0
\f1\b weight
\f0\b0 \'a0depending on how relevant that term is to that Web page. For example, a term like\'a0
\f2\i Java
\f0\i0 \'a0might appear in two Web pages titled "Introduction to Java" and "Python: A High-level Overview". In an inverted index, Java might be given a high weight of say 0.9 for first Web page as it is all about Java, i.e., Java appears several times in the Web page. Similarly, it might get a low weight of 0.1 for second Web page as it is about Python and Java might have appeared very few times. One simple measure to come up with weights like 0.9 & 0.1 is referred to as\'a0
\f3\i\b tf-idf
\f0\i0\b0 , which stands for\'a0
\f2\i term frequency-inverse document frequency
\f0\i0 . This measure involves two parts: tf & idf and in this assignment we are concerned with only tf. Given a term and a document (Web page), term frequency can be computed as follows:\

\f1\b tf
\f0\b0 (term, document) = number of times\'a0
\f2\i term
\f0\i0 \'a0appears in document\'a0
\f1\b /
\f0\b0 \'a0total number of words in document\

\f1\b Implementation Details
\f0\b0 :\
Since term frequency measure comes from IR field, lets name our class as\'a0
\f1\b IRUtil
\f0\b0 \'a0indicating that it is a\'a0
\f2\i utility
\f0\i0 \'a0class that provides methods for computing IR measures like tf. Below is the class and it includes two methods. The method termFrequency() will take a\'a0
\f2\i term
\f0\i0 \'a0and\'a0
\f2\i document
\f0\i0 \'a0and returns the term frequency weight. This method first invokes getFrequencyCount, which returns the number of times\'a0
\f2\i term
\f0\i0 \'a0appears in the\'a0
\f2\i document
\f0\i0 , i.e., the numerator in the above formula. The pseudocode (informal steps) to implement the logic is provided in the methods and you would implement the corresponding code.\
public class\'a0
\f1\b IRUtil
\f0\b0 \'a0\{\
\'a0 \'a0 public static int\'a0
\f2\i getFrequencyCount
\f0\i0 (String term, String doc) \{\
\'a0 \'a0 \'a0 \'a0 Step 1: Convert both\'a0
\f2\i term
\f0\i0 \'a0&\'a0
\f2\i doc
\f0\i0 \'a0into lower-case\
\'a0 \'a0 \'a0 \'a0 Step 2: Initialize variable frequencyCount to 0\
\'a0 \'a0 \'a0 \'a0 Step 3: Initialize variable index with the index position of\'a0
\f2\i term
\f0\i0 \'a0in\'a0
\f2\i doc
\f0\i0 . Hint: Use indexOf() method\
\'a0 \'a0 \'a0 \'a0 Step 4: If index >= 0 (i.e..,\'a0
\f2\i term
\f0\i0 \'a0appears in\'a0
\f2\i doc)
\f0\i0 , then go to next step. Else go to last step.\
\'a0 \'a0 \'a0 \'a0 Step 5: Increment frequencyCount\
\'a0 \'a0 \'a0 \'a0 Step 6: Re-compute\'a0
\f2\i doc
\f0\i0 \'a0with the string appearing\'a0
\f1\b after
\f0\b0 \'a0
\f2\i term
\f0\i0 \'a0till end of\'a0
\f2\i doc
\f0\i0 . Hint: You can use substring() & length() methods\
\'a0 \'a0 \'a0 \'a0 Step 7: Re-compute index with index position of\'a0
\f2\i term
\f0\i0 \'a0in the re-computed\'a0
\f2\i doc
\f0\i0 . Go to step 4 to continue processing.\
\'a0 \'a0 \'a0 \'a0 Step 8: Return frequencyCount\
\'a0 \'a0 \}\
\'a0 \'a0 public static double\'a0
\f2\i termFrequency
\f0\i0 (String term, String doc) \{\
\'a0 \'a0 \'a0 \'a0 Step 1: int frequencyCount = getFrequencyCount(term, doc);\
\'a0 \'a0 \'a0 \'a0 Step 2: Create variable totalTermCount to hold the total number of terms appearing in\'a0
\f2\i doc
\f0\i0 . Hint: You can use split() with white-space " " as delimiter\
\'a0 \'a0 \'a0 \'a0 Step 3: return frequencyCount / totalTermCount. This is the tf formula.\
\'a0 \'a0 \}\
\}\
\
}