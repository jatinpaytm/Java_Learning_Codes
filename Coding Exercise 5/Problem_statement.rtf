{\rtf1\ansi\ansicpg1252\cocoartf2639
\cocoatextscaling0\cocoaplatform0{\fonttbl\f0\fnil\fcharset0 HelveticaNeue-Bold;\f1\fnil\fcharset0 HelveticaNeue;\f2\fnil\fcharset0 Menlo-Regular;
\f3\fnil\fcharset0 HelveticaNeue-BoldItalic;\f4\fnil\fcharset0 HelveticaNeue-Italic;}
{\colortbl;\red255\green255\blue255;\red21\green22\blue24;\red255\green255\blue255;\red163\green85\blue14;
\red38\green127\blue108;}
{\*\expandedcolortbl;;\cssrgb\c10980\c11373\c12157;\cssrgb\c100000\c100000\c100000;\cssrgb\c70588\c41176\c5490;
\cssrgb\c17647\c56471\c49804;}
{\*\listtable{\list\listtemplateid1\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{none\}}{\leveltext\leveltemplateid1\'00;}{\levelnumbers;}\fi-360\li720\lin720 }{\listname ;}\listid1}}
{\*\listoverridetable{\listoverride\listid1\listoverridecount0\ls1}}
\paperw11900\paperh16840\margl1440\margr1440\vieww11520\viewh8400\viewkind0
\deftab720
\pard\pardeftab720\partightenfactor0

\f0\b\fs45\fsmilli22800 \cf2 \cb3 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 Parsing API Response ~ Let's make use of Boxed Primitives & String class\

\f1\b0\fs32 This is a simple exercise where you will use boxed primitive classes\'a0
\f0\b Integer
\f1\b0 \'a0&\'a0
\f0\b Double
\f1\b0 \'a0along with\'a0
\f0\b String
\f1\b0 \'a0class. You will be implementing simple logic to parse\'a0 required data from a piece of text, which is in\'a0
\f0\b XML
\f1\b0 \'a0format. The text in XML format can be considered as a response returned by a Web service (REST API) on submitting some request.\'a0Below is a sample real XML response returned by the\'a0 REST API provided by a Website called goodreads (www.goodreads.com), which can be used for bookmarking, writing reviews on books, etc. You would be parsing the below XML response, which is about a single book.\cb1 \
\cb3 Ideally,\'a0an XML parsing library like JDOM (jdom.org) would be used for parsing XML. Since this course is not about XML, we parse using String class. In case you are not familiar with XML, it is simply a data exchange format where you have data enclosed in XML tags called elements. For instance, in the below XML, title of the book is expressed as <title>Walden</title> where Walden is the title of the book while <title> & </title> are XML tags indicating start and end of title. So, the XML tags meaningfully describe the data they are encapsulating. In this exercise, you will be parsing 6 fields from the below XML string. The 6 fields are\'a0
\f0\b title
\f1\b0 ,\'a0
\f0\b author name
\f1\b0 ,\'a0
\f0\b publication year
\f1\b0 ,\'a0
\f0\b average rating
\f1\b0 ,\'a0
\f0\b ratings count
\f1\b0 \'a0and\'a0
\f0\b image url
\f1\b0 . Ratings count is nothing but the total number of ratings that the book has.\cb1 \
\cb3 To extract the title 'Walden', all you need to do is search for the preceding and succeeding tags <title> & </title> in the XML string and extract 'Walden'. Below are the tags you would use for the rest of the fields.\cb1 \
\cb3 Author name: <name> & </name>\cb1 \
\cb3 Publication year: <original_publication_year type="integer"> & </original_publication_year>\cb1 \
\cb3 Average rating: <average_rating> &\'a0</average_rating>\cb1 \
\cb3 Ratings Count:\'a0<ratings_count type="integer"> & </ratings_count>\cb1 \
\cb3 Image url:\'a0<image_url> & </image_url>\'a0\cb1 \
\cb3 In fact, succeeding tag for all fields can be simply "<" too. Below, we discuss more about the provided classes and what you will be implementing.\cb1 \
\pard\tx220\tx720\pardeftab720\li720\fi-720\partightenfactor0
\ls1\ilvl0
\f2\fs28\fsmilli14400 \cf4 \cb3 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 		\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec4 <work>\cf2 \cb1 \strokec2 \
\ls1\ilvl0\cf4 \cb3 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 		\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec4 <id\cf2 \strokec2  type=\cf5 \strokec5 "integer"\cf4 \strokec4 >\cf2 \strokec2 2361393\cf4 \strokec4 </id>\cf2 \cb1 \strokec2 \
\ls1\ilvl0\cf4 \cb3 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 		\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec4 <books_count\cf2 \strokec2  type=\cf5 \strokec5 "integer"\cf4 \strokec4 >\cf2 \strokec2 813\cf4 \strokec4 </books_count>\cf2 \cb1 \strokec2 \
\ls1\ilvl0\cf4 \cb3 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 		\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec4 <ratings_count\cf2 \strokec2  type=\cf5 \strokec5 "integer"\cf4 \strokec4 >\cf2 \strokec2 1,16,315\cf4 \strokec4 </ratings_count>\cf2 \cb1 \strokec2 \
\ls1\ilvl0\cf4 \cb3 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 		\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec4 <text_reviews_count\cf2 \strokec2  type=\cf5 \strokec5 "integer"\cf4 \strokec4 >\cf2 \strokec2 3439\cf4 \strokec4 </text_reviews_count>\cf2 \cb1 \strokec2 \
\ls1\ilvl0\cf4 \cb3 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 		\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec4 <original_publication_year\cf2 \strokec2  type=\cf5 \strokec5 "integer"\cf4 \strokec4 >\cf2 \strokec2 1854\cf4 \strokec4 </original_publication_year>\cf2 \cb1 \strokec2 \
\ls1\ilvl0\cf4 \cb3 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 		\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec4 <original_publication_month\cf2 \strokec2  type=\cf5 \strokec5 "integer"\cf2 \strokec2  nil=\cf5 \strokec5 "true"\cf4 \strokec4 />\cf2 \cb1 \strokec2 \
\ls1\ilvl0\cf4 \cb3 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 		\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec4 <original_publication_day\cf2 \strokec2  type=\cf5 \strokec5 "integer"\cf2 \strokec2  nil=\cf5 \strokec5 "true"\cf4 \strokec4 />\cf2 \cb1 \strokec2 \
\ls1\ilvl0\cf4 \cb3 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 		\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec4 <average_rating>\cf2 \strokec2 3.79\cf4 \strokec4 </average_rating>\cf2 \cb1 \strokec2 \
\ls1\ilvl0\cf4 \cb3 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 		\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec4 <best_book\cf2 \strokec2  type=\cf5 \strokec5 "Book"\cf4 \strokec4 >\cf2 \cb1 \strokec2 \
\ls1\ilvl0\cf4 \cb3 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 		\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec4 <id\cf2 \strokec2  type=\cf5 \strokec5 "integer"\cf4 \strokec4 >\cf2 \strokec2 16902\cf4 \strokec4 </id>\cf2 \cb1 \strokec2 \
\ls1\ilvl0\cf4 \cb3 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 		\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec4 <title>\cf2 \strokec2 Walden\cf4 \strokec4 </title>\cf2 \cb1 \strokec2 \
\ls1\ilvl0\cf4 \cb3 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 		\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec4 <author>\cf2 \cb1 \strokec2 \
\ls1\ilvl0\cf4 \cb3 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 		\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec4 <id\cf2 \strokec2  type=\cf5 \strokec5 "integer"\cf4 \strokec4 >\cf2 \strokec2 10264\cf4 \strokec4 </id>\cf2 \cb1 \strokec2 \
\ls1\ilvl0\cf4 \cb3 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 		\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec4 <name>\cf2 \strokec2 Henry David Thoreau\cf4 \strokec4 </name>\cf2 \cb1 \strokec2 \
\ls1\ilvl0\cf4 \cb3 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 		\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec4 </author>\cf2 \cb1 \strokec2 \
\ls1\ilvl0\cf4 \cb3 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 		\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec4 <image_url>\cf2 \strokec2 http://images.gr-assets.com/books/1465675526m/16902.jpg\cf4 \strokec4 </image_url>\cf2 \cb1 \strokec2 \
\ls1\ilvl0\cf4 \cb3 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 		\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec4 <small_image_url>\cf2 \strokec2 http://images.gr-assets.com/books/1465675526s/16902.jpg\cf4 \strokec4 </small_image_url>\cf2 \cb1 \strokec2 \
\ls1\ilvl0\cf4 \cb3 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 		\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec4 </best_book>\cf2 \cb1 \strokec2 \
\ls1\ilvl0\cf4 \cb3 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 		\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec4 </work>\cf2 \cb1 \strokec2 \
\pard\pardeftab720\partightenfactor0

\f1\fs32 \cf2 \cb3 Two classes are provided for this exercise: APIResponseParser.java & Book.java. APIResponseParser as the name suggests is used for parsing API response. It has one public method\'a0
\f3\i\b parse
\f1\i0\b0 \'a0that takes the XML string as input and returns an instance of Book. Some template code is provided for parsing 'title' and you can do the same for all other fields to be extracted. In the template code, the variables startRule & endRule are simply the preceding & succeeding tags that we discussed above. The actual extraction logic should be implemented in another private overloaded method\'a0
\f3\i\b parse
\f1\i0\b0 \'a0and it would be pretty simple logic. You can see in the provided code that we are invoking the private parse method. Once the required data is extracted it needs to be then set in the Book instance. For instance, you can see that once we extracted title, we are invoking\'a0
\f4\i setTitle
\f1\i0 \'a0method on book instance.\'a0\cb1 \
\cb3 The Book class has 6 private fields whose values need to be set via getters & setters from the parse method. Getters & setters are provided for three of the fields and for the rest you can complete. Do follow the proper naming conventions for getters & setters. For instance, you can see that for the field publicationYear, getter is named as getPublicationYear ('p' in publication is capitalized) and setter is named as setPublicationYear.\'a0\cb1 \
\cb3 Since the private method\'a0
\f4\i parse
\f1\i0 \'a0would return a String, you would have to do appropriate data type conversions (by using boxed primitives) for some of the fields as required in Book class, e.g., int for publication year. Note that ratings count can include commas as in the case of above XML in which case you would have to strip them before doing the conversion, i.e., 1,16,315 in the above example is just one number 116315. Finally, you would return the Book instance. In the APIResponseParser class, main method is provided, which invokes the parse method with the above sample XML string. As usual your solution would be auto-evaluated by a Junit script, which would also pass an XML string similar to the above ~ only data would change and all the tags would be same.\cb1 \

\f0\b \cb3 Bonus
\f1\b0 : As a bonus, you can also implement another overloaded private\'a0
\f3\i\b parse
\f1\i0\b0 \'a0method, which would take a\'a0
\f0\b String[]
\f1\b0 \'a0instead of String for startRule. This would enables us to pass multiple tags for startRule. For e.g., to extract author name from the above XML, we could pass\'a0
\f0\b new String[] \{"<author>", "<name>"\}
\f1\b0 . With this you would first use <author> to scan till <author> and then you can use <name> to reach the beginning of 'author name'. endRule would still be string. So, the logic would simply use a string array for start rule as you may deal with more than one tag and it would be a very simple extension. If time permits, you could implement this method too and use it instead of other private parse method. The data returned would still be the same. This parse method would be more useful as sometimes a single start tag may not help us reach the beginning of the data to be extracted.\'a0\cb1 \
\cb3 That's about it. Feel free to reach out to me if you have any questions.\'a0\cb1 \
\cb3 Your code will be tested for correctness via automated tests. So, do submit your code to check for correctness. If you are unable to complete the exercise after considerable effort, then feel\'a0 free to\'a0
\f0\b private message
\f1\b0 \'a0(
\f3\i\b pls. do not submit in Q&A discussion board
\f1\i0\b0 ) me your code and I can provide feedback.\cb1 \
}